// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cl.proto

#include "cl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR C2L_EnterWorld::C2L_EnterWorld(
    ::_pbi::ConstantInitialized)
  : pos_(nullptr)
  , uid_(uint64_t{0u}){}
struct C2L_EnterWorldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2L_EnterWorldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2L_EnterWorldDefaultTypeInternal() {}
  union {
    C2L_EnterWorld _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2L_EnterWorldDefaultTypeInternal _C2L_EnterWorld_default_instance_;
PROTOBUF_CONSTEXPR L2C_EnterWorld::L2C_EnterWorld(
    ::_pbi::ConstantInitialized)
  : pos_(nullptr)
  , uid_(uint64_t{0u})
  , ret_(0u){}
struct L2C_EnterWorldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L2C_EnterWorldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L2C_EnterWorldDefaultTypeInternal() {}
  union {
    L2C_EnterWorld _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L2C_EnterWorldDefaultTypeInternal _L2C_EnterWorld_default_instance_;
PROTOBUF_CONSTEXPR L2C_NotifyEnterWorld::L2C_NotifyEnterWorld(
    ::_pbi::ConstantInitialized)
  : pos_(nullptr)
  , uid_(uint64_t{0u})
  , ret_(0u){}
struct L2C_NotifyEnterWorldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L2C_NotifyEnterWorldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L2C_NotifyEnterWorldDefaultTypeInternal() {}
  union {
    L2C_NotifyEnterWorld _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L2C_NotifyEnterWorldDefaultTypeInternal _L2C_NotifyEnterWorld_default_instance_;
PROTOBUF_CONSTEXPR C2L_Move::C2L_Move(
    ::_pbi::ConstantInitialized)
  : direction_(nullptr)
  , uid_(uint64_t{0u})
  , speed_(0){}
struct C2L_MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2L_MoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2L_MoveDefaultTypeInternal() {}
  union {
    C2L_Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2L_MoveDefaultTypeInternal _C2L_Move_default_instance_;
PROTOBUF_CONSTEXPR L2C_Move::L2C_Move(
    ::_pbi::ConstantInitialized)
  : direction_(nullptr)
  , uid_(uint64_t{0u})
  , ret_(0u)
  , speed_(0){}
struct L2C_MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L2C_MoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L2C_MoveDefaultTypeInternal() {}
  union {
    L2C_Move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L2C_MoveDefaultTypeInternal _L2C_Move_default_instance_;
PROTOBUF_CONSTEXPR L2C_NotifyMove::L2C_NotifyMove(
    ::_pbi::ConstantInitialized)
  : direction_(nullptr)
  , uid_(uint64_t{0u})
  , ret_(0u)
  , speed_(0){}
struct L2C_NotifyMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L2C_NotifyMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L2C_NotifyMoveDefaultTypeInternal() {}
  union {
    L2C_NotifyMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L2C_NotifyMoveDefaultTypeInternal _L2C_NotifyMove_default_instance_;
PROTOBUF_CONSTEXPR C2L_StopMove::C2L_StopMove(
    ::_pbi::ConstantInitialized)
  : uid_(uint64_t{0u}){}
struct C2L_StopMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C2L_StopMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C2L_StopMoveDefaultTypeInternal() {}
  union {
    C2L_StopMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C2L_StopMoveDefaultTypeInternal _C2L_StopMove_default_instance_;
PROTOBUF_CONSTEXPR L2C_StopMove::L2C_StopMove(
    ::_pbi::ConstantInitialized)
  : uid_(uint64_t{0u})
  , ret_(0u){}
struct L2C_StopMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L2C_StopMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L2C_StopMoveDefaultTypeInternal() {}
  union {
    L2C_StopMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L2C_StopMoveDefaultTypeInternal _L2C_StopMove_default_instance_;
PROTOBUF_CONSTEXPR L2C_NotifyStopMove::L2C_NotifyStopMove(
    ::_pbi::ConstantInitialized)
  : uid_(uint64_t{0u})
  , ret_(0u){}
struct L2C_NotifyStopMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR L2C_NotifyStopMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~L2C_NotifyStopMoveDefaultTypeInternal() {}
  union {
    L2C_NotifyStopMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 L2C_NotifyStopMoveDefaultTypeInternal _L2C_NotifyStopMove_default_instance_;
static ::_pb::Metadata file_level_metadata_cl_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_cl_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cl_2eproto = nullptr;

const uint32_t TableStruct_cl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2L_EnterWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::C2L_EnterWorld, uid_),
  PROTOBUF_FIELD_OFFSET(::C2L_EnterWorld, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::L2C_EnterWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::L2C_EnterWorld, ret_),
  PROTOBUF_FIELD_OFFSET(::L2C_EnterWorld, uid_),
  PROTOBUF_FIELD_OFFSET(::L2C_EnterWorld, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyEnterWorld, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyEnterWorld, ret_),
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyEnterWorld, uid_),
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyEnterWorld, pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2L_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::C2L_Move, uid_),
  PROTOBUF_FIELD_OFFSET(::C2L_Move, direction_),
  PROTOBUF_FIELD_OFFSET(::C2L_Move, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::L2C_Move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::L2C_Move, ret_),
  PROTOBUF_FIELD_OFFSET(::L2C_Move, uid_),
  PROTOBUF_FIELD_OFFSET(::L2C_Move, direction_),
  PROTOBUF_FIELD_OFFSET(::L2C_Move, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyMove, ret_),
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyMove, uid_),
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyMove, direction_),
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyMove, speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::C2L_StopMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::C2L_StopMove, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::L2C_StopMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::L2C_StopMove, ret_),
  PROTOBUF_FIELD_OFFSET(::L2C_StopMove, uid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyStopMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyStopMove, ret_),
  PROTOBUF_FIELD_OFFSET(::L2C_NotifyStopMove, uid_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Vector3)},
  { 9, -1, -1, sizeof(::C2L_EnterWorld)},
  { 17, -1, -1, sizeof(::L2C_EnterWorld)},
  { 26, -1, -1, sizeof(::L2C_NotifyEnterWorld)},
  { 35, -1, -1, sizeof(::C2L_Move)},
  { 44, -1, -1, sizeof(::L2C_Move)},
  { 54, -1, -1, sizeof(::L2C_NotifyMove)},
  { 64, -1, -1, sizeof(::C2L_StopMove)},
  { 71, -1, -1, sizeof(::L2C_StopMove)},
  { 79, -1, -1, sizeof(::L2C_NotifyStopMove)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_Vector3_default_instance_._instance,
  &::_C2L_EnterWorld_default_instance_._instance,
  &::_L2C_EnterWorld_default_instance_._instance,
  &::_L2C_NotifyEnterWorld_default_instance_._instance,
  &::_C2L_Move_default_instance_._instance,
  &::_L2C_Move_default_instance_._instance,
  &::_L2C_NotifyMove_default_instance_._instance,
  &::_C2L_StopMove_default_instance_._instance,
  &::_L2C_StopMove_default_instance_._instance,
  &::_L2C_NotifyStopMove_default_instance_._instance,
};

const char descriptor_table_protodef_cl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010cl.proto\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 "
  "\001(\002\022\t\n\001z\030\003 \001(\002\"4\n\016C2L_EnterWorld\022\013\n\003uid\030"
  "\001 \001(\004\022\025\n\003pos\030\002 \001(\0132\010.Vector3\"A\n\016L2C_Ente"
  "rWorld\022\013\n\003ret\030\001 \001(\r\022\013\n\003uid\030\002 \001(\004\022\025\n\003pos\030"
  "\003 \001(\0132\010.Vector3\"G\n\024L2C_NotifyEnterWorld\022"
  "\013\n\003ret\030\001 \001(\r\022\013\n\003uid\030\002 \001(\004\022\025\n\003pos\030\003 \001(\0132\010"
  ".Vector3\"C\n\010C2L_Move\022\013\n\003uid\030\001 \001(\004\022\033\n\tdir"
  "ection\030\002 \001(\0132\010.Vector3\022\r\n\005speed\030\003 \001(\002\"P\n"
  "\010L2C_Move\022\013\n\003ret\030\001 \001(\r\022\013\n\003uid\030\002 \001(\004\022\033\n\td"
  "irection\030\003 \001(\0132\010.Vector3\022\r\n\005speed\030\004 \001(\002\""
  "V\n\016L2C_NotifyMove\022\013\n\003ret\030\001 \001(\r\022\013\n\003uid\030\002 "
  "\001(\004\022\033\n\tdirection\030\003 \001(\0132\010.Vector3\022\r\n\005spee"
  "d\030\004 \001(\002\"\033\n\014C2L_StopMove\022\013\n\003uid\030\001 \001(\004\"(\n\014"
  "L2C_StopMove\022\013\n\003ret\030\001 \001(\r\022\013\n\003uid\030\002 \001(\004\"."
  "\n\022L2C_NotifyStopMove\022\013\n\003ret\030\001 \001(\r\022\013\n\003uid"
  "\030\002 \001(\004*\340\001\n\010MSG_TYPE\022\013\n\007ID_NONE\020\000\022\025\n\021ID_C"
  "2L_EnterWorld\020\001\022\025\n\021ID_L2C_EnterWorld\020\002\022\033"
  "\n\027ID_L2C_NotifyEnterWorld\020\003\022\017\n\013ID_C2L_Mo"
  "ve\020\004\022\017\n\013ID_L2C_Move\020\005\022\025\n\021ID_L2C_NotifyMo"
  "ve\020\006\022\023\n\017ID_C2L_StopMove\020\007\022\023\n\017ID_L2C_Stop"
  "Move\020\010\022\031\n\025ID_L2C_NotifyStopMove\020\tb\006proto"
  "3"
  ;
static ::_pbi::once_flag descriptor_table_cl_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cl_2eproto = {
    false, false, 841, descriptor_table_protodef_cl_2eproto,
    "cl.proto",
    &descriptor_table_cl_2eproto_once, nullptr, 0, 10,
    schemas, file_default_instances, TableStruct_cl_2eproto::offsets,
    file_level_metadata_cl_2eproto, file_level_enum_descriptors_cl_2eproto,
    file_level_service_descriptors_cl_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cl_2eproto_getter() {
  return &descriptor_table_cl_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cl_2eproto(&descriptor_table_cl_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_cl_2eproto);
  return file_level_enum_descriptors_cl_2eproto[0];
}
bool MSG_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:Vector3)
}

inline void Vector3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }

void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector3 *>(to)->MergeFrom(
      static_cast<const Vector3 &>(from));
}


void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[0]);
}

// ===================================================================

class C2L_EnterWorld::_Internal {
 public:
  static const ::Vector3& pos(const C2L_EnterWorld* msg);
};

const ::Vector3&
C2L_EnterWorld::_Internal::pos(const C2L_EnterWorld* msg) {
  return *msg->pos_;
}
C2L_EnterWorld::C2L_EnterWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:C2L_EnterWorld)
}
C2L_EnterWorld::C2L_EnterWorld(const C2L_EnterWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:C2L_EnterWorld)
}

inline void C2L_EnterWorld::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&uid_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(uid_));
}

C2L_EnterWorld::~C2L_EnterWorld() {
  // @@protoc_insertion_point(destructor:C2L_EnterWorld)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2L_EnterWorld::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void C2L_EnterWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2L_EnterWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:C2L_EnterWorld)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  uid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2L_EnterWorld::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vector3 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2L_EnterWorld::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2L_EnterWorld)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uid = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // .Vector3 pos = 2;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2L_EnterWorld)
  return target;
}

size_t C2L_EnterWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2L_EnterWorld)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vector3 pos = 2;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint64 uid = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2L_EnterWorld::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C2L_EnterWorld::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2L_EnterWorld::GetClassData() const { return &_class_data_; }

void C2L_EnterWorld::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C2L_EnterWorld *>(to)->MergeFrom(
      static_cast<const C2L_EnterWorld &>(from));
}


void C2L_EnterWorld::MergeFrom(const C2L_EnterWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2L_EnterWorld)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::Vector3::MergeFrom(from._internal_pos());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2L_EnterWorld::CopyFrom(const C2L_EnterWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2L_EnterWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2L_EnterWorld::IsInitialized() const {
  return true;
}

void C2L_EnterWorld::InternalSwap(C2L_EnterWorld* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2L_EnterWorld, uid_)
      + sizeof(C2L_EnterWorld::uid_)
      - PROTOBUF_FIELD_OFFSET(C2L_EnterWorld, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2L_EnterWorld::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[1]);
}

// ===================================================================

class L2C_EnterWorld::_Internal {
 public:
  static const ::Vector3& pos(const L2C_EnterWorld* msg);
};

const ::Vector3&
L2C_EnterWorld::_Internal::pos(const L2C_EnterWorld* msg) {
  return *msg->pos_;
}
L2C_EnterWorld::L2C_EnterWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:L2C_EnterWorld)
}
L2C_EnterWorld::L2C_EnterWorld(const L2C_EnterWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:L2C_EnterWorld)
}

inline void L2C_EnterWorld::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(ret_));
}

L2C_EnterWorld::~L2C_EnterWorld() {
  // @@protoc_insertion_point(destructor:L2C_EnterWorld)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L2C_EnterWorld::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void L2C_EnterWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void L2C_EnterWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:L2C_EnterWorld)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L2C_EnterWorld::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vector3 pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L2C_EnterWorld::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:L2C_EnterWorld)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ret(), target);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uid(), target);
  }

  // .Vector3 pos = 3;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:L2C_EnterWorld)
  return target;
}

size_t L2C_EnterWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:L2C_EnterWorld)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vector3 pos = 3;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L2C_EnterWorld::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    L2C_EnterWorld::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L2C_EnterWorld::GetClassData() const { return &_class_data_; }

void L2C_EnterWorld::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<L2C_EnterWorld *>(to)->MergeFrom(
      static_cast<const L2C_EnterWorld &>(from));
}


void L2C_EnterWorld::MergeFrom(const L2C_EnterWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:L2C_EnterWorld)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::Vector3::MergeFrom(from._internal_pos());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L2C_EnterWorld::CopyFrom(const L2C_EnterWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:L2C_EnterWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2C_EnterWorld::IsInitialized() const {
  return true;
}

void L2C_EnterWorld::InternalSwap(L2C_EnterWorld* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L2C_EnterWorld, ret_)
      + sizeof(L2C_EnterWorld::ret_)
      - PROTOBUF_FIELD_OFFSET(L2C_EnterWorld, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata L2C_EnterWorld::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[2]);
}

// ===================================================================

class L2C_NotifyEnterWorld::_Internal {
 public:
  static const ::Vector3& pos(const L2C_NotifyEnterWorld* msg);
};

const ::Vector3&
L2C_NotifyEnterWorld::_Internal::pos(const L2C_NotifyEnterWorld* msg) {
  return *msg->pos_;
}
L2C_NotifyEnterWorld::L2C_NotifyEnterWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:L2C_NotifyEnterWorld)
}
L2C_NotifyEnterWorld::L2C_NotifyEnterWorld(const L2C_NotifyEnterWorld& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:L2C_NotifyEnterWorld)
}

inline void L2C_NotifyEnterWorld::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pos_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&pos_)) + sizeof(ret_));
}

L2C_NotifyEnterWorld::~L2C_NotifyEnterWorld() {
  // @@protoc_insertion_point(destructor:L2C_NotifyEnterWorld)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L2C_NotifyEnterWorld::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pos_;
}

void L2C_NotifyEnterWorld::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void L2C_NotifyEnterWorld::Clear() {
// @@protoc_insertion_point(message_clear_start:L2C_NotifyEnterWorld)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L2C_NotifyEnterWorld::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vector3 pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L2C_NotifyEnterWorld::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:L2C_NotifyEnterWorld)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ret(), target);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uid(), target);
  }

  // .Vector3 pos = 3;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:L2C_NotifyEnterWorld)
  return target;
}

size_t L2C_NotifyEnterWorld::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:L2C_NotifyEnterWorld)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vector3 pos = 3;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L2C_NotifyEnterWorld::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    L2C_NotifyEnterWorld::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L2C_NotifyEnterWorld::GetClassData() const { return &_class_data_; }

void L2C_NotifyEnterWorld::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<L2C_NotifyEnterWorld *>(to)->MergeFrom(
      static_cast<const L2C_NotifyEnterWorld &>(from));
}


void L2C_NotifyEnterWorld::MergeFrom(const L2C_NotifyEnterWorld& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:L2C_NotifyEnterWorld)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _internal_mutable_pos()->::Vector3::MergeFrom(from._internal_pos());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L2C_NotifyEnterWorld::CopyFrom(const L2C_NotifyEnterWorld& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:L2C_NotifyEnterWorld)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2C_NotifyEnterWorld::IsInitialized() const {
  return true;
}

void L2C_NotifyEnterWorld::InternalSwap(L2C_NotifyEnterWorld* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L2C_NotifyEnterWorld, ret_)
      + sizeof(L2C_NotifyEnterWorld::ret_)
      - PROTOBUF_FIELD_OFFSET(L2C_NotifyEnterWorld, pos_)>(
          reinterpret_cast<char*>(&pos_),
          reinterpret_cast<char*>(&other->pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata L2C_NotifyEnterWorld::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[3]);
}

// ===================================================================

class C2L_Move::_Internal {
 public:
  static const ::Vector3& direction(const C2L_Move* msg);
};

const ::Vector3&
C2L_Move::_Internal::direction(const C2L_Move* msg) {
  return *msg->direction_;
}
C2L_Move::C2L_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:C2L_Move)
}
C2L_Move::C2L_Move(const C2L_Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    direction_ = new ::Vector3(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:C2L_Move)
}

inline void C2L_Move::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(speed_));
}

C2L_Move::~C2L_Move() {
  // @@protoc_insertion_point(destructor:C2L_Move)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2L_Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete direction_;
}

void C2L_Move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2L_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:C2L_Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2L_Move::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vector3 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2L_Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2L_Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uid = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  // .Vector3 direction = 2;
  if (this->_internal_has_direction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // float speed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2L_Move)
  return target;
}

size_t C2L_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2L_Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vector3 direction = 2;
  if (this->_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // uint64 uid = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  // float speed = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2L_Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C2L_Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2L_Move::GetClassData() const { return &_class_data_; }

void C2L_Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C2L_Move *>(to)->MergeFrom(
      static_cast<const C2L_Move &>(from));
}


void C2L_Move::MergeFrom(const C2L_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2L_Move)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_direction()) {
    _internal_mutable_direction()->::Vector3::MergeFrom(from._internal_direction());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2L_Move::CopyFrom(const C2L_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2L_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2L_Move::IsInitialized() const {
  return true;
}

void C2L_Move::InternalSwap(C2L_Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C2L_Move, speed_)
      + sizeof(C2L_Move::speed_)
      - PROTOBUF_FIELD_OFFSET(C2L_Move, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C2L_Move::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[4]);
}

// ===================================================================

class L2C_Move::_Internal {
 public:
  static const ::Vector3& direction(const L2C_Move* msg);
};

const ::Vector3&
L2C_Move::_Internal::direction(const L2C_Move* msg) {
  return *msg->direction_;
}
L2C_Move::L2C_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:L2C_Move)
}
L2C_Move::L2C_Move(const L2C_Move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    direction_ = new ::Vector3(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:L2C_Move)
}

inline void L2C_Move::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(speed_));
}

L2C_Move::~L2C_Move() {
  // @@protoc_insertion_point(destructor:L2C_Move)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L2C_Move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete direction_;
}

void L2C_Move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void L2C_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:L2C_Move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L2C_Move::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vector3 direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L2C_Move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:L2C_Move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ret(), target);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uid(), target);
  }

  // .Vector3 direction = 3;
  if (this->_internal_has_direction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // float speed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:L2C_Move)
  return target;
}

size_t L2C_Move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:L2C_Move)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vector3 direction = 3;
  if (this->_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ret());
  }

  // float speed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L2C_Move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    L2C_Move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L2C_Move::GetClassData() const { return &_class_data_; }

void L2C_Move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<L2C_Move *>(to)->MergeFrom(
      static_cast<const L2C_Move &>(from));
}


void L2C_Move::MergeFrom(const L2C_Move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:L2C_Move)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_direction()) {
    _internal_mutable_direction()->::Vector3::MergeFrom(from._internal_direction());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L2C_Move::CopyFrom(const L2C_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:L2C_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2C_Move::IsInitialized() const {
  return true;
}

void L2C_Move::InternalSwap(L2C_Move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L2C_Move, speed_)
      + sizeof(L2C_Move::speed_)
      - PROTOBUF_FIELD_OFFSET(L2C_Move, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata L2C_Move::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[5]);
}

// ===================================================================

class L2C_NotifyMove::_Internal {
 public:
  static const ::Vector3& direction(const L2C_NotifyMove* msg);
};

const ::Vector3&
L2C_NotifyMove::_Internal::direction(const L2C_NotifyMove* msg) {
  return *msg->direction_;
}
L2C_NotifyMove::L2C_NotifyMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:L2C_NotifyMove)
}
L2C_NotifyMove::L2C_NotifyMove(const L2C_NotifyMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_direction()) {
    direction_ = new ::Vector3(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:L2C_NotifyMove)
}

inline void L2C_NotifyMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(speed_));
}

L2C_NotifyMove::~L2C_NotifyMove() {
  // @@protoc_insertion_point(destructor:L2C_NotifyMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L2C_NotifyMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete direction_;
}

void L2C_NotifyMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void L2C_NotifyMove::Clear() {
// @@protoc_insertion_point(message_clear_start:L2C_NotifyMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&speed_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L2C_NotifyMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Vector3 direction = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L2C_NotifyMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:L2C_NotifyMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ret(), target);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uid(), target);
  }

  // .Vector3 direction = 3;
  if (this->_internal_has_direction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::direction(this),
        _Internal::direction(this).GetCachedSize(), target, stream);
  }

  // float speed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:L2C_NotifyMove)
  return target;
}

size_t L2C_NotifyMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:L2C_NotifyMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vector3 direction = 3;
  if (this->_internal_has_direction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *direction_);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ret());
  }

  // float speed = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L2C_NotifyMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    L2C_NotifyMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L2C_NotifyMove::GetClassData() const { return &_class_data_; }

void L2C_NotifyMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<L2C_NotifyMove *>(to)->MergeFrom(
      static_cast<const L2C_NotifyMove &>(from));
}


void L2C_NotifyMove::MergeFrom(const L2C_NotifyMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:L2C_NotifyMove)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_direction()) {
    _internal_mutable_direction()->::Vector3::MergeFrom(from._internal_direction());
  }
  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _internal_set_speed(from._internal_speed());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L2C_NotifyMove::CopyFrom(const L2C_NotifyMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:L2C_NotifyMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2C_NotifyMove::IsInitialized() const {
  return true;
}

void L2C_NotifyMove::InternalSwap(L2C_NotifyMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L2C_NotifyMove, speed_)
      + sizeof(L2C_NotifyMove::speed_)
      - PROTOBUF_FIELD_OFFSET(L2C_NotifyMove, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata L2C_NotifyMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[6]);
}

// ===================================================================

class C2L_StopMove::_Internal {
 public:
};

C2L_StopMove::C2L_StopMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:C2L_StopMove)
}
C2L_StopMove::C2L_StopMove(const C2L_StopMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uid_ = from.uid_;
  // @@protoc_insertion_point(copy_constructor:C2L_StopMove)
}

inline void C2L_StopMove::SharedCtor() {
uid_ = uint64_t{0u};
}

C2L_StopMove::~C2L_StopMove() {
  // @@protoc_insertion_point(destructor:C2L_StopMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C2L_StopMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void C2L_StopMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void C2L_StopMove::Clear() {
// @@protoc_insertion_point(message_clear_start:C2L_StopMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C2L_StopMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 uid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C2L_StopMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:C2L_StopMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 uid = 1;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:C2L_StopMove)
  return target;
}

size_t C2L_StopMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:C2L_StopMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 uid = 1;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C2L_StopMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    C2L_StopMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C2L_StopMove::GetClassData() const { return &_class_data_; }

void C2L_StopMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<C2L_StopMove *>(to)->MergeFrom(
      static_cast<const C2L_StopMove &>(from));
}


void C2L_StopMove::MergeFrom(const C2L_StopMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:C2L_StopMove)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C2L_StopMove::CopyFrom(const C2L_StopMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:C2L_StopMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2L_StopMove::IsInitialized() const {
  return true;
}

void C2L_StopMove::InternalSwap(C2L_StopMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(uid_, other->uid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C2L_StopMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[7]);
}

// ===================================================================

class L2C_StopMove::_Internal {
 public:
};

L2C_StopMove::L2C_StopMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:L2C_StopMove)
}
L2C_StopMove::L2C_StopMove(const L2C_StopMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:L2C_StopMove)
}

inline void L2C_StopMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
}

L2C_StopMove::~L2C_StopMove() {
  // @@protoc_insertion_point(destructor:L2C_StopMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L2C_StopMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void L2C_StopMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void L2C_StopMove::Clear() {
// @@protoc_insertion_point(message_clear_start:L2C_StopMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L2C_StopMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L2C_StopMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:L2C_StopMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ret(), target);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:L2C_StopMove)
  return target;
}

size_t L2C_StopMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:L2C_StopMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L2C_StopMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    L2C_StopMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L2C_StopMove::GetClassData() const { return &_class_data_; }

void L2C_StopMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<L2C_StopMove *>(to)->MergeFrom(
      static_cast<const L2C_StopMove &>(from));
}


void L2C_StopMove::MergeFrom(const L2C_StopMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:L2C_StopMove)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L2C_StopMove::CopyFrom(const L2C_StopMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:L2C_StopMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2C_StopMove::IsInitialized() const {
  return true;
}

void L2C_StopMove::InternalSwap(L2C_StopMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L2C_StopMove, ret_)
      + sizeof(L2C_StopMove::ret_)
      - PROTOBUF_FIELD_OFFSET(L2C_StopMove, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata L2C_StopMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[8]);
}

// ===================================================================

class L2C_NotifyStopMove::_Internal {
 public:
};

L2C_NotifyStopMove::L2C_NotifyStopMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:L2C_NotifyStopMove)
}
L2C_NotifyStopMove::L2C_NotifyStopMove(const L2C_NotifyStopMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uid_, &from.uid_,
    static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
  // @@protoc_insertion_point(copy_constructor:L2C_NotifyStopMove)
}

inline void L2C_NotifyStopMove::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&ret_) -
    reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
}

L2C_NotifyStopMove::~L2C_NotifyStopMove() {
  // @@protoc_insertion_point(destructor:L2C_NotifyStopMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void L2C_NotifyStopMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void L2C_NotifyStopMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void L2C_NotifyStopMove::Clear() {
// @@protoc_insertion_point(message_clear_start:L2C_NotifyStopMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ret_) -
      reinterpret_cast<char*>(&uid_)) + sizeof(ret_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* L2C_NotifyStopMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 uid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* L2C_NotifyStopMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:L2C_NotifyStopMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_ret(), target);
  }

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_uid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:L2C_NotifyStopMove)
  return target;
}

size_t L2C_NotifyStopMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:L2C_NotifyStopMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 uid = 2;
  if (this->_internal_uid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uid());
  }

  // uint32 ret = 1;
  if (this->_internal_ret() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ret());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData L2C_NotifyStopMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    L2C_NotifyStopMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*L2C_NotifyStopMove::GetClassData() const { return &_class_data_; }

void L2C_NotifyStopMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<L2C_NotifyStopMove *>(to)->MergeFrom(
      static_cast<const L2C_NotifyStopMove &>(from));
}


void L2C_NotifyStopMove::MergeFrom(const L2C_NotifyStopMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:L2C_NotifyStopMove)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uid() != 0) {
    _internal_set_uid(from._internal_uid());
  }
  if (from._internal_ret() != 0) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void L2C_NotifyStopMove::CopyFrom(const L2C_NotifyStopMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:L2C_NotifyStopMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool L2C_NotifyStopMove::IsInitialized() const {
  return true;
}

void L2C_NotifyStopMove::InternalSwap(L2C_NotifyStopMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(L2C_NotifyStopMove, ret_)
      + sizeof(L2C_NotifyStopMove::ret_)
      - PROTOBUF_FIELD_OFFSET(L2C_NotifyStopMove, uid_)>(
          reinterpret_cast<char*>(&uid_),
          reinterpret_cast<char*>(&other->uid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata L2C_NotifyStopMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cl_2eproto_getter, &descriptor_table_cl_2eproto_once,
      file_level_metadata_cl_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vector3*
Arena::CreateMaybeMessage< ::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::C2L_EnterWorld*
Arena::CreateMaybeMessage< ::C2L_EnterWorld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2L_EnterWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::L2C_EnterWorld*
Arena::CreateMaybeMessage< ::L2C_EnterWorld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::L2C_EnterWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::L2C_NotifyEnterWorld*
Arena::CreateMaybeMessage< ::L2C_NotifyEnterWorld >(Arena* arena) {
  return Arena::CreateMessageInternal< ::L2C_NotifyEnterWorld >(arena);
}
template<> PROTOBUF_NOINLINE ::C2L_Move*
Arena::CreateMaybeMessage< ::C2L_Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2L_Move >(arena);
}
template<> PROTOBUF_NOINLINE ::L2C_Move*
Arena::CreateMaybeMessage< ::L2C_Move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::L2C_Move >(arena);
}
template<> PROTOBUF_NOINLINE ::L2C_NotifyMove*
Arena::CreateMaybeMessage< ::L2C_NotifyMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::L2C_NotifyMove >(arena);
}
template<> PROTOBUF_NOINLINE ::C2L_StopMove*
Arena::CreateMaybeMessage< ::C2L_StopMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::C2L_StopMove >(arena);
}
template<> PROTOBUF_NOINLINE ::L2C_StopMove*
Arena::CreateMaybeMessage< ::L2C_StopMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::L2C_StopMove >(arena);
}
template<> PROTOBUF_NOINLINE ::L2C_NotifyStopMove*
Arena::CreateMaybeMessage< ::L2C_NotifyStopMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::L2C_NotifyStopMove >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
