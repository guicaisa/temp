// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cl_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_cl_2eproto;
class C2L_EnterWorld;
struct C2L_EnterWorldDefaultTypeInternal;
extern C2L_EnterWorldDefaultTypeInternal _C2L_EnterWorld_default_instance_;
class C2L_Move;
struct C2L_MoveDefaultTypeInternal;
extern C2L_MoveDefaultTypeInternal _C2L_Move_default_instance_;
class C2L_StopMove;
struct C2L_StopMoveDefaultTypeInternal;
extern C2L_StopMoveDefaultTypeInternal _C2L_StopMove_default_instance_;
class L2C_EnterWorld;
struct L2C_EnterWorldDefaultTypeInternal;
extern L2C_EnterWorldDefaultTypeInternal _L2C_EnterWorld_default_instance_;
class L2C_Move;
struct L2C_MoveDefaultTypeInternal;
extern L2C_MoveDefaultTypeInternal _L2C_Move_default_instance_;
class L2C_NotifyEnterWorld;
struct L2C_NotifyEnterWorldDefaultTypeInternal;
extern L2C_NotifyEnterWorldDefaultTypeInternal _L2C_NotifyEnterWorld_default_instance_;
class L2C_NotifyMove;
struct L2C_NotifyMoveDefaultTypeInternal;
extern L2C_NotifyMoveDefaultTypeInternal _L2C_NotifyMove_default_instance_;
class L2C_NotifyStopMove;
struct L2C_NotifyStopMoveDefaultTypeInternal;
extern L2C_NotifyStopMoveDefaultTypeInternal _L2C_NotifyStopMove_default_instance_;
class L2C_StopMove;
struct L2C_StopMoveDefaultTypeInternal;
extern L2C_StopMoveDefaultTypeInternal _L2C_StopMove_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::C2L_EnterWorld* Arena::CreateMaybeMessage<::C2L_EnterWorld>(Arena*);
template<> ::C2L_Move* Arena::CreateMaybeMessage<::C2L_Move>(Arena*);
template<> ::C2L_StopMove* Arena::CreateMaybeMessage<::C2L_StopMove>(Arena*);
template<> ::L2C_EnterWorld* Arena::CreateMaybeMessage<::L2C_EnterWorld>(Arena*);
template<> ::L2C_Move* Arena::CreateMaybeMessage<::L2C_Move>(Arena*);
template<> ::L2C_NotifyEnterWorld* Arena::CreateMaybeMessage<::L2C_NotifyEnterWorld>(Arena*);
template<> ::L2C_NotifyMove* Arena::CreateMaybeMessage<::L2C_NotifyMove>(Arena*);
template<> ::L2C_NotifyStopMove* Arena::CreateMaybeMessage<::L2C_NotifyStopMove>(Arena*);
template<> ::L2C_StopMove* Arena::CreateMaybeMessage<::L2C_StopMove>(Arena*);
template<> ::Vector3* Arena::CreateMaybeMessage<::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MSG_TYPE : int {
  ID_NONE = 0,
  ID_C2L_EnterWorld = 1,
  ID_L2C_EnterWorld = 2,
  ID_L2C_NotifyEnterWorld = 3,
  ID_C2L_Move = 4,
  ID_L2C_Move = 5,
  ID_L2C_NotifyMove = 6,
  ID_C2L_StopMove = 7,
  ID_L2C_StopMove = 8,
  ID_L2C_NotifyStopMove = 9,
  MSG_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MSG_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MSG_TYPE_IsValid(int value);
constexpr MSG_TYPE MSG_TYPE_MIN = ID_NONE;
constexpr MSG_TYPE MSG_TYPE_MAX = ID_L2C_NotifyStopMove;
constexpr int MSG_TYPE_ARRAYSIZE = MSG_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSG_TYPE_descriptor();
template<typename T>
inline const std::string& MSG_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSG_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSG_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSG_TYPE_descriptor(), enum_t_value);
}
inline bool MSG_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MSG_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSG_TYPE>(
    MSG_TYPE_descriptor(), name, value);
}
// ===================================================================

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// -------------------------------------------------------------------

class C2L_EnterWorld final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2L_EnterWorld) */ {
 public:
  inline C2L_EnterWorld() : C2L_EnterWorld(nullptr) {}
  ~C2L_EnterWorld() override;
  explicit PROTOBUF_CONSTEXPR C2L_EnterWorld(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2L_EnterWorld(const C2L_EnterWorld& from);
  C2L_EnterWorld(C2L_EnterWorld&& from) noexcept
    : C2L_EnterWorld() {
    *this = ::std::move(from);
  }

  inline C2L_EnterWorld& operator=(const C2L_EnterWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2L_EnterWorld& operator=(C2L_EnterWorld&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2L_EnterWorld& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2L_EnterWorld* internal_default_instance() {
    return reinterpret_cast<const C2L_EnterWorld*>(
               &_C2L_EnterWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(C2L_EnterWorld& a, C2L_EnterWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(C2L_EnterWorld* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2L_EnterWorld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2L_EnterWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2L_EnterWorld>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2L_EnterWorld& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2L_EnterWorld& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2L_EnterWorld* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2L_EnterWorld";
  }
  protected:
  explicit C2L_EnterWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kUidFieldNumber = 1,
  };
  // .Vector3 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector3& pos() const;
  PROTOBUF_NODISCARD ::Vector3* release_pos();
  ::Vector3* mutable_pos();
  void set_allocated_pos(::Vector3* pos);
  private:
  const ::Vector3& _internal_pos() const;
  ::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Vector3* pos);
  ::Vector3* unsafe_arena_release_pos();

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:C2L_EnterWorld)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vector3* pos_;
  uint64_t uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// -------------------------------------------------------------------

class L2C_EnterWorld final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:L2C_EnterWorld) */ {
 public:
  inline L2C_EnterWorld() : L2C_EnterWorld(nullptr) {}
  ~L2C_EnterWorld() override;
  explicit PROTOBUF_CONSTEXPR L2C_EnterWorld(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  L2C_EnterWorld(const L2C_EnterWorld& from);
  L2C_EnterWorld(L2C_EnterWorld&& from) noexcept
    : L2C_EnterWorld() {
    *this = ::std::move(from);
  }

  inline L2C_EnterWorld& operator=(const L2C_EnterWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline L2C_EnterWorld& operator=(L2C_EnterWorld&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const L2C_EnterWorld& default_instance() {
    return *internal_default_instance();
  }
  static inline const L2C_EnterWorld* internal_default_instance() {
    return reinterpret_cast<const L2C_EnterWorld*>(
               &_L2C_EnterWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(L2C_EnterWorld& a, L2C_EnterWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(L2C_EnterWorld* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L2C_EnterWorld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  L2C_EnterWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<L2C_EnterWorld>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const L2C_EnterWorld& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const L2C_EnterWorld& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2C_EnterWorld* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "L2C_EnterWorld";
  }
  protected:
  explicit L2C_EnterWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kUidFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .Vector3 pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector3& pos() const;
  PROTOBUF_NODISCARD ::Vector3* release_pos();
  ::Vector3* mutable_pos();
  void set_allocated_pos(::Vector3* pos);
  private:
  const ::Vector3& _internal_pos() const;
  ::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Vector3* pos);
  ::Vector3* unsafe_arena_release_pos();

  // uint64 uid = 2;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint32 ret = 1;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:L2C_EnterWorld)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vector3* pos_;
  uint64_t uid_;
  uint32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// -------------------------------------------------------------------

class L2C_NotifyEnterWorld final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:L2C_NotifyEnterWorld) */ {
 public:
  inline L2C_NotifyEnterWorld() : L2C_NotifyEnterWorld(nullptr) {}
  ~L2C_NotifyEnterWorld() override;
  explicit PROTOBUF_CONSTEXPR L2C_NotifyEnterWorld(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  L2C_NotifyEnterWorld(const L2C_NotifyEnterWorld& from);
  L2C_NotifyEnterWorld(L2C_NotifyEnterWorld&& from) noexcept
    : L2C_NotifyEnterWorld() {
    *this = ::std::move(from);
  }

  inline L2C_NotifyEnterWorld& operator=(const L2C_NotifyEnterWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline L2C_NotifyEnterWorld& operator=(L2C_NotifyEnterWorld&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const L2C_NotifyEnterWorld& default_instance() {
    return *internal_default_instance();
  }
  static inline const L2C_NotifyEnterWorld* internal_default_instance() {
    return reinterpret_cast<const L2C_NotifyEnterWorld*>(
               &_L2C_NotifyEnterWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(L2C_NotifyEnterWorld& a, L2C_NotifyEnterWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(L2C_NotifyEnterWorld* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L2C_NotifyEnterWorld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  L2C_NotifyEnterWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<L2C_NotifyEnterWorld>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const L2C_NotifyEnterWorld& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const L2C_NotifyEnterWorld& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2C_NotifyEnterWorld* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "L2C_NotifyEnterWorld";
  }
  protected:
  explicit L2C_NotifyEnterWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 3,
    kUidFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // .Vector3 pos = 3;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector3& pos() const;
  PROTOBUF_NODISCARD ::Vector3* release_pos();
  ::Vector3* mutable_pos();
  void set_allocated_pos(::Vector3* pos);
  private:
  const ::Vector3& _internal_pos() const;
  ::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::Vector3* pos);
  ::Vector3* unsafe_arena_release_pos();

  // uint64 uid = 2;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint32 ret = 1;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:L2C_NotifyEnterWorld)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vector3* pos_;
  uint64_t uid_;
  uint32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// -------------------------------------------------------------------

class C2L_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2L_Move) */ {
 public:
  inline C2L_Move() : C2L_Move(nullptr) {}
  ~C2L_Move() override;
  explicit PROTOBUF_CONSTEXPR C2L_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2L_Move(const C2L_Move& from);
  C2L_Move(C2L_Move&& from) noexcept
    : C2L_Move() {
    *this = ::std::move(from);
  }

  inline C2L_Move& operator=(const C2L_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2L_Move& operator=(C2L_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2L_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2L_Move* internal_default_instance() {
    return reinterpret_cast<const C2L_Move*>(
               &_C2L_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C2L_Move& a, C2L_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(C2L_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2L_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2L_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2L_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2L_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2L_Move& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2L_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2L_Move";
  }
  protected:
  explicit C2L_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 2,
    kUidFieldNumber = 1,
    kSpeedFieldNumber = 3,
  };
  // .Vector3 direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::Vector3& direction() const;
  PROTOBUF_NODISCARD ::Vector3* release_direction();
  ::Vector3* mutable_direction();
  void set_allocated_direction(::Vector3* direction);
  private:
  const ::Vector3& _internal_direction() const;
  ::Vector3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::Vector3* direction);
  ::Vector3* unsafe_arena_release_direction();

  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // float speed = 3;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:C2L_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vector3* direction_;
  uint64_t uid_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// -------------------------------------------------------------------

class L2C_Move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:L2C_Move) */ {
 public:
  inline L2C_Move() : L2C_Move(nullptr) {}
  ~L2C_Move() override;
  explicit PROTOBUF_CONSTEXPR L2C_Move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  L2C_Move(const L2C_Move& from);
  L2C_Move(L2C_Move&& from) noexcept
    : L2C_Move() {
    *this = ::std::move(from);
  }

  inline L2C_Move& operator=(const L2C_Move& from) {
    CopyFrom(from);
    return *this;
  }
  inline L2C_Move& operator=(L2C_Move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const L2C_Move& default_instance() {
    return *internal_default_instance();
  }
  static inline const L2C_Move* internal_default_instance() {
    return reinterpret_cast<const L2C_Move*>(
               &_L2C_Move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(L2C_Move& a, L2C_Move& b) {
    a.Swap(&b);
  }
  inline void Swap(L2C_Move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L2C_Move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  L2C_Move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<L2C_Move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const L2C_Move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const L2C_Move& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2C_Move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "L2C_Move";
  }
  protected:
  explicit L2C_Move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 3,
    kUidFieldNumber = 2,
    kRetFieldNumber = 1,
    kSpeedFieldNumber = 4,
  };
  // .Vector3 direction = 3;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::Vector3& direction() const;
  PROTOBUF_NODISCARD ::Vector3* release_direction();
  ::Vector3* mutable_direction();
  void set_allocated_direction(::Vector3* direction);
  private:
  const ::Vector3& _internal_direction() const;
  ::Vector3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::Vector3* direction);
  ::Vector3* unsafe_arena_release_direction();

  // uint64 uid = 2;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint32 ret = 1;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // float speed = 4;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:L2C_Move)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vector3* direction_;
  uint64_t uid_;
  uint32_t ret_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// -------------------------------------------------------------------

class L2C_NotifyMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:L2C_NotifyMove) */ {
 public:
  inline L2C_NotifyMove() : L2C_NotifyMove(nullptr) {}
  ~L2C_NotifyMove() override;
  explicit PROTOBUF_CONSTEXPR L2C_NotifyMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  L2C_NotifyMove(const L2C_NotifyMove& from);
  L2C_NotifyMove(L2C_NotifyMove&& from) noexcept
    : L2C_NotifyMove() {
    *this = ::std::move(from);
  }

  inline L2C_NotifyMove& operator=(const L2C_NotifyMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline L2C_NotifyMove& operator=(L2C_NotifyMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const L2C_NotifyMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const L2C_NotifyMove* internal_default_instance() {
    return reinterpret_cast<const L2C_NotifyMove*>(
               &_L2C_NotifyMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(L2C_NotifyMove& a, L2C_NotifyMove& b) {
    a.Swap(&b);
  }
  inline void Swap(L2C_NotifyMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L2C_NotifyMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  L2C_NotifyMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<L2C_NotifyMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const L2C_NotifyMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const L2C_NotifyMove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2C_NotifyMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "L2C_NotifyMove";
  }
  protected:
  explicit L2C_NotifyMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirectionFieldNumber = 3,
    kUidFieldNumber = 2,
    kRetFieldNumber = 1,
    kSpeedFieldNumber = 4,
  };
  // .Vector3 direction = 3;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::Vector3& direction() const;
  PROTOBUF_NODISCARD ::Vector3* release_direction();
  ::Vector3* mutable_direction();
  void set_allocated_direction(::Vector3* direction);
  private:
  const ::Vector3& _internal_direction() const;
  ::Vector3* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::Vector3* direction);
  ::Vector3* unsafe_arena_release_direction();

  // uint64 uid = 2;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint32 ret = 1;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // float speed = 4;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:L2C_NotifyMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::Vector3* direction_;
  uint64_t uid_;
  uint32_t ret_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// -------------------------------------------------------------------

class C2L_StopMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:C2L_StopMove) */ {
 public:
  inline C2L_StopMove() : C2L_StopMove(nullptr) {}
  ~C2L_StopMove() override;
  explicit PROTOBUF_CONSTEXPR C2L_StopMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C2L_StopMove(const C2L_StopMove& from);
  C2L_StopMove(C2L_StopMove&& from) noexcept
    : C2L_StopMove() {
    *this = ::std::move(from);
  }

  inline C2L_StopMove& operator=(const C2L_StopMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline C2L_StopMove& operator=(C2L_StopMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C2L_StopMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const C2L_StopMove* internal_default_instance() {
    return reinterpret_cast<const C2L_StopMove*>(
               &_C2L_StopMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(C2L_StopMove& a, C2L_StopMove& b) {
    a.Swap(&b);
  }
  inline void Swap(C2L_StopMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C2L_StopMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C2L_StopMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C2L_StopMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C2L_StopMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const C2L_StopMove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C2L_StopMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "C2L_StopMove";
  }
  protected:
  explicit C2L_StopMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
  };
  // uint64 uid = 1;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:C2L_StopMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t uid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// -------------------------------------------------------------------

class L2C_StopMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:L2C_StopMove) */ {
 public:
  inline L2C_StopMove() : L2C_StopMove(nullptr) {}
  ~L2C_StopMove() override;
  explicit PROTOBUF_CONSTEXPR L2C_StopMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  L2C_StopMove(const L2C_StopMove& from);
  L2C_StopMove(L2C_StopMove&& from) noexcept
    : L2C_StopMove() {
    *this = ::std::move(from);
  }

  inline L2C_StopMove& operator=(const L2C_StopMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline L2C_StopMove& operator=(L2C_StopMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const L2C_StopMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const L2C_StopMove* internal_default_instance() {
    return reinterpret_cast<const L2C_StopMove*>(
               &_L2C_StopMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(L2C_StopMove& a, L2C_StopMove& b) {
    a.Swap(&b);
  }
  inline void Swap(L2C_StopMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L2C_StopMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  L2C_StopMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<L2C_StopMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const L2C_StopMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const L2C_StopMove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2C_StopMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "L2C_StopMove";
  }
  protected:
  explicit L2C_StopMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // uint64 uid = 2;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint32 ret = 1;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:L2C_StopMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t uid_;
  uint32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// -------------------------------------------------------------------

class L2C_NotifyStopMove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:L2C_NotifyStopMove) */ {
 public:
  inline L2C_NotifyStopMove() : L2C_NotifyStopMove(nullptr) {}
  ~L2C_NotifyStopMove() override;
  explicit PROTOBUF_CONSTEXPR L2C_NotifyStopMove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  L2C_NotifyStopMove(const L2C_NotifyStopMove& from);
  L2C_NotifyStopMove(L2C_NotifyStopMove&& from) noexcept
    : L2C_NotifyStopMove() {
    *this = ::std::move(from);
  }

  inline L2C_NotifyStopMove& operator=(const L2C_NotifyStopMove& from) {
    CopyFrom(from);
    return *this;
  }
  inline L2C_NotifyStopMove& operator=(L2C_NotifyStopMove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const L2C_NotifyStopMove& default_instance() {
    return *internal_default_instance();
  }
  static inline const L2C_NotifyStopMove* internal_default_instance() {
    return reinterpret_cast<const L2C_NotifyStopMove*>(
               &_L2C_NotifyStopMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(L2C_NotifyStopMove& a, L2C_NotifyStopMove& b) {
    a.Swap(&b);
  }
  inline void Swap(L2C_NotifyStopMove* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(L2C_NotifyStopMove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  L2C_NotifyStopMove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<L2C_NotifyStopMove>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const L2C_NotifyStopMove& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const L2C_NotifyStopMove& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(L2C_NotifyStopMove* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "L2C_NotifyStopMove";
  }
  protected:
  explicit L2C_NotifyStopMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // uint64 uid = 2;
  void clear_uid();
  uint64_t uid() const;
  void set_uid(uint64_t value);
  private:
  uint64_t _internal_uid() const;
  void _internal_set_uid(uint64_t value);
  public:

  // uint32 ret = 1;
  void clear_ret();
  uint32_t ret() const;
  void set_ret(uint32_t value);
  private:
  uint32_t _internal_ret() const;
  void _internal_set_ret(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:L2C_NotifyStopMove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t uid_;
  uint32_t ret_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_cl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Vector3.z)
}

// -------------------------------------------------------------------

// C2L_EnterWorld

// uint64 uid = 1;
inline void C2L_EnterWorld::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t C2L_EnterWorld::_internal_uid() const {
  return uid_;
}
inline uint64_t C2L_EnterWorld::uid() const {
  // @@protoc_insertion_point(field_get:C2L_EnterWorld.uid)
  return _internal_uid();
}
inline void C2L_EnterWorld::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void C2L_EnterWorld::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:C2L_EnterWorld.uid)
}

// .Vector3 pos = 2;
inline bool C2L_EnterWorld::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool C2L_EnterWorld::has_pos() const {
  return _internal_has_pos();
}
inline void C2L_EnterWorld::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Vector3& C2L_EnterWorld::_internal_pos() const {
  const ::Vector3* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& C2L_EnterWorld::pos() const {
  // @@protoc_insertion_point(field_get:C2L_EnterWorld.pos)
  return _internal_pos();
}
inline void C2L_EnterWorld::unsafe_arena_set_allocated_pos(
    ::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:C2L_EnterWorld.pos)
}
inline ::Vector3* C2L_EnterWorld::release_pos() {
  
  ::Vector3* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* C2L_EnterWorld::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:C2L_EnterWorld.pos)
  
  ::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Vector3* C2L_EnterWorld::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Vector3* C2L_EnterWorld::mutable_pos() {
  ::Vector3* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:C2L_EnterWorld.pos)
  return _msg;
}
inline void C2L_EnterWorld::set_allocated_pos(::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:C2L_EnterWorld.pos)
}

// -------------------------------------------------------------------

// L2C_EnterWorld

// uint32 ret = 1;
inline void L2C_EnterWorld::clear_ret() {
  ret_ = 0u;
}
inline uint32_t L2C_EnterWorld::_internal_ret() const {
  return ret_;
}
inline uint32_t L2C_EnterWorld::ret() const {
  // @@protoc_insertion_point(field_get:L2C_EnterWorld.ret)
  return _internal_ret();
}
inline void L2C_EnterWorld::_internal_set_ret(uint32_t value) {
  
  ret_ = value;
}
inline void L2C_EnterWorld::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:L2C_EnterWorld.ret)
}

// uint64 uid = 2;
inline void L2C_EnterWorld::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t L2C_EnterWorld::_internal_uid() const {
  return uid_;
}
inline uint64_t L2C_EnterWorld::uid() const {
  // @@protoc_insertion_point(field_get:L2C_EnterWorld.uid)
  return _internal_uid();
}
inline void L2C_EnterWorld::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void L2C_EnterWorld::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:L2C_EnterWorld.uid)
}

// .Vector3 pos = 3;
inline bool L2C_EnterWorld::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool L2C_EnterWorld::has_pos() const {
  return _internal_has_pos();
}
inline void L2C_EnterWorld::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Vector3& L2C_EnterWorld::_internal_pos() const {
  const ::Vector3* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& L2C_EnterWorld::pos() const {
  // @@protoc_insertion_point(field_get:L2C_EnterWorld.pos)
  return _internal_pos();
}
inline void L2C_EnterWorld::unsafe_arena_set_allocated_pos(
    ::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:L2C_EnterWorld.pos)
}
inline ::Vector3* L2C_EnterWorld::release_pos() {
  
  ::Vector3* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* L2C_EnterWorld::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:L2C_EnterWorld.pos)
  
  ::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Vector3* L2C_EnterWorld::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Vector3* L2C_EnterWorld::mutable_pos() {
  ::Vector3* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:L2C_EnterWorld.pos)
  return _msg;
}
inline void L2C_EnterWorld::set_allocated_pos(::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:L2C_EnterWorld.pos)
}

// -------------------------------------------------------------------

// L2C_NotifyEnterWorld

// uint32 ret = 1;
inline void L2C_NotifyEnterWorld::clear_ret() {
  ret_ = 0u;
}
inline uint32_t L2C_NotifyEnterWorld::_internal_ret() const {
  return ret_;
}
inline uint32_t L2C_NotifyEnterWorld::ret() const {
  // @@protoc_insertion_point(field_get:L2C_NotifyEnterWorld.ret)
  return _internal_ret();
}
inline void L2C_NotifyEnterWorld::_internal_set_ret(uint32_t value) {
  
  ret_ = value;
}
inline void L2C_NotifyEnterWorld::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:L2C_NotifyEnterWorld.ret)
}

// uint64 uid = 2;
inline void L2C_NotifyEnterWorld::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t L2C_NotifyEnterWorld::_internal_uid() const {
  return uid_;
}
inline uint64_t L2C_NotifyEnterWorld::uid() const {
  // @@protoc_insertion_point(field_get:L2C_NotifyEnterWorld.uid)
  return _internal_uid();
}
inline void L2C_NotifyEnterWorld::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void L2C_NotifyEnterWorld::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:L2C_NotifyEnterWorld.uid)
}

// .Vector3 pos = 3;
inline bool L2C_NotifyEnterWorld::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool L2C_NotifyEnterWorld::has_pos() const {
  return _internal_has_pos();
}
inline void L2C_NotifyEnterWorld::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Vector3& L2C_NotifyEnterWorld::_internal_pos() const {
  const ::Vector3* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& L2C_NotifyEnterWorld::pos() const {
  // @@protoc_insertion_point(field_get:L2C_NotifyEnterWorld.pos)
  return _internal_pos();
}
inline void L2C_NotifyEnterWorld::unsafe_arena_set_allocated_pos(
    ::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:L2C_NotifyEnterWorld.pos)
}
inline ::Vector3* L2C_NotifyEnterWorld::release_pos() {
  
  ::Vector3* temp = pos_;
  pos_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* L2C_NotifyEnterWorld::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:L2C_NotifyEnterWorld.pos)
  
  ::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Vector3* L2C_NotifyEnterWorld::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::Vector3* L2C_NotifyEnterWorld::mutable_pos() {
  ::Vector3* _msg = _internal_mutable_pos();
  // @@protoc_insertion_point(field_mutable:L2C_NotifyEnterWorld.pos)
  return _msg;
}
inline void L2C_NotifyEnterWorld::set_allocated_pos(::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pos);
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:L2C_NotifyEnterWorld.pos)
}

// -------------------------------------------------------------------

// C2L_Move

// uint64 uid = 1;
inline void C2L_Move::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t C2L_Move::_internal_uid() const {
  return uid_;
}
inline uint64_t C2L_Move::uid() const {
  // @@protoc_insertion_point(field_get:C2L_Move.uid)
  return _internal_uid();
}
inline void C2L_Move::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void C2L_Move::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:C2L_Move.uid)
}

// .Vector3 direction = 2;
inline bool C2L_Move::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool C2L_Move::has_direction() const {
  return _internal_has_direction();
}
inline void C2L_Move::clear_direction() {
  if (GetArenaForAllocation() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
inline const ::Vector3& C2L_Move::_internal_direction() const {
  const ::Vector3* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& C2L_Move::direction() const {
  // @@protoc_insertion_point(field_get:C2L_Move.direction)
  return _internal_direction();
}
inline void C2L_Move::unsafe_arena_set_allocated_direction(
    ::Vector3* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:C2L_Move.direction)
}
inline ::Vector3* C2L_Move::release_direction() {
  
  ::Vector3* temp = direction_;
  direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* C2L_Move::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:C2L_Move.direction)
  
  ::Vector3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::Vector3* C2L_Move::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    direction_ = p;
  }
  return direction_;
}
inline ::Vector3* C2L_Move::mutable_direction() {
  ::Vector3* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:C2L_Move.direction)
  return _msg;
}
inline void C2L_Move::set_allocated_direction(::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:C2L_Move.direction)
}

// float speed = 3;
inline void C2L_Move::clear_speed() {
  speed_ = 0;
}
inline float C2L_Move::_internal_speed() const {
  return speed_;
}
inline float C2L_Move::speed() const {
  // @@protoc_insertion_point(field_get:C2L_Move.speed)
  return _internal_speed();
}
inline void C2L_Move::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void C2L_Move::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:C2L_Move.speed)
}

// -------------------------------------------------------------------

// L2C_Move

// uint32 ret = 1;
inline void L2C_Move::clear_ret() {
  ret_ = 0u;
}
inline uint32_t L2C_Move::_internal_ret() const {
  return ret_;
}
inline uint32_t L2C_Move::ret() const {
  // @@protoc_insertion_point(field_get:L2C_Move.ret)
  return _internal_ret();
}
inline void L2C_Move::_internal_set_ret(uint32_t value) {
  
  ret_ = value;
}
inline void L2C_Move::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:L2C_Move.ret)
}

// uint64 uid = 2;
inline void L2C_Move::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t L2C_Move::_internal_uid() const {
  return uid_;
}
inline uint64_t L2C_Move::uid() const {
  // @@protoc_insertion_point(field_get:L2C_Move.uid)
  return _internal_uid();
}
inline void L2C_Move::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void L2C_Move::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:L2C_Move.uid)
}

// .Vector3 direction = 3;
inline bool L2C_Move::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool L2C_Move::has_direction() const {
  return _internal_has_direction();
}
inline void L2C_Move::clear_direction() {
  if (GetArenaForAllocation() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
inline const ::Vector3& L2C_Move::_internal_direction() const {
  const ::Vector3* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& L2C_Move::direction() const {
  // @@protoc_insertion_point(field_get:L2C_Move.direction)
  return _internal_direction();
}
inline void L2C_Move::unsafe_arena_set_allocated_direction(
    ::Vector3* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:L2C_Move.direction)
}
inline ::Vector3* L2C_Move::release_direction() {
  
  ::Vector3* temp = direction_;
  direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* L2C_Move::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:L2C_Move.direction)
  
  ::Vector3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::Vector3* L2C_Move::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    direction_ = p;
  }
  return direction_;
}
inline ::Vector3* L2C_Move::mutable_direction() {
  ::Vector3* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:L2C_Move.direction)
  return _msg;
}
inline void L2C_Move::set_allocated_direction(::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:L2C_Move.direction)
}

// float speed = 4;
inline void L2C_Move::clear_speed() {
  speed_ = 0;
}
inline float L2C_Move::_internal_speed() const {
  return speed_;
}
inline float L2C_Move::speed() const {
  // @@protoc_insertion_point(field_get:L2C_Move.speed)
  return _internal_speed();
}
inline void L2C_Move::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void L2C_Move::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:L2C_Move.speed)
}

// -------------------------------------------------------------------

// L2C_NotifyMove

// uint32 ret = 1;
inline void L2C_NotifyMove::clear_ret() {
  ret_ = 0u;
}
inline uint32_t L2C_NotifyMove::_internal_ret() const {
  return ret_;
}
inline uint32_t L2C_NotifyMove::ret() const {
  // @@protoc_insertion_point(field_get:L2C_NotifyMove.ret)
  return _internal_ret();
}
inline void L2C_NotifyMove::_internal_set_ret(uint32_t value) {
  
  ret_ = value;
}
inline void L2C_NotifyMove::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:L2C_NotifyMove.ret)
}

// uint64 uid = 2;
inline void L2C_NotifyMove::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t L2C_NotifyMove::_internal_uid() const {
  return uid_;
}
inline uint64_t L2C_NotifyMove::uid() const {
  // @@protoc_insertion_point(field_get:L2C_NotifyMove.uid)
  return _internal_uid();
}
inline void L2C_NotifyMove::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void L2C_NotifyMove::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:L2C_NotifyMove.uid)
}

// .Vector3 direction = 3;
inline bool L2C_NotifyMove::_internal_has_direction() const {
  return this != internal_default_instance() && direction_ != nullptr;
}
inline bool L2C_NotifyMove::has_direction() const {
  return _internal_has_direction();
}
inline void L2C_NotifyMove::clear_direction() {
  if (GetArenaForAllocation() == nullptr && direction_ != nullptr) {
    delete direction_;
  }
  direction_ = nullptr;
}
inline const ::Vector3& L2C_NotifyMove::_internal_direction() const {
  const ::Vector3* p = direction_;
  return p != nullptr ? *p : reinterpret_cast<const ::Vector3&>(
      ::_Vector3_default_instance_);
}
inline const ::Vector3& L2C_NotifyMove::direction() const {
  // @@protoc_insertion_point(field_get:L2C_NotifyMove.direction)
  return _internal_direction();
}
inline void L2C_NotifyMove::unsafe_arena_set_allocated_direction(
    ::Vector3* direction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(direction_);
  }
  direction_ = direction;
  if (direction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:L2C_NotifyMove.direction)
}
inline ::Vector3* L2C_NotifyMove::release_direction() {
  
  ::Vector3* temp = direction_;
  direction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Vector3* L2C_NotifyMove::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_release:L2C_NotifyMove.direction)
  
  ::Vector3* temp = direction_;
  direction_ = nullptr;
  return temp;
}
inline ::Vector3* L2C_NotifyMove::_internal_mutable_direction() {
  
  if (direction_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector3>(GetArenaForAllocation());
    direction_ = p;
  }
  return direction_;
}
inline ::Vector3* L2C_NotifyMove::mutable_direction() {
  ::Vector3* _msg = _internal_mutable_direction();
  // @@protoc_insertion_point(field_mutable:L2C_NotifyMove.direction)
  return _msg;
}
inline void L2C_NotifyMove::set_allocated_direction(::Vector3* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete direction_;
  }
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(direction);
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    
  } else {
    
  }
  direction_ = direction;
  // @@protoc_insertion_point(field_set_allocated:L2C_NotifyMove.direction)
}

// float speed = 4;
inline void L2C_NotifyMove::clear_speed() {
  speed_ = 0;
}
inline float L2C_NotifyMove::_internal_speed() const {
  return speed_;
}
inline float L2C_NotifyMove::speed() const {
  // @@protoc_insertion_point(field_get:L2C_NotifyMove.speed)
  return _internal_speed();
}
inline void L2C_NotifyMove::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void L2C_NotifyMove::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:L2C_NotifyMove.speed)
}

// -------------------------------------------------------------------

// C2L_StopMove

// uint64 uid = 1;
inline void C2L_StopMove::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t C2L_StopMove::_internal_uid() const {
  return uid_;
}
inline uint64_t C2L_StopMove::uid() const {
  // @@protoc_insertion_point(field_get:C2L_StopMove.uid)
  return _internal_uid();
}
inline void C2L_StopMove::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void C2L_StopMove::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:C2L_StopMove.uid)
}

// -------------------------------------------------------------------

// L2C_StopMove

// uint32 ret = 1;
inline void L2C_StopMove::clear_ret() {
  ret_ = 0u;
}
inline uint32_t L2C_StopMove::_internal_ret() const {
  return ret_;
}
inline uint32_t L2C_StopMove::ret() const {
  // @@protoc_insertion_point(field_get:L2C_StopMove.ret)
  return _internal_ret();
}
inline void L2C_StopMove::_internal_set_ret(uint32_t value) {
  
  ret_ = value;
}
inline void L2C_StopMove::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:L2C_StopMove.ret)
}

// uint64 uid = 2;
inline void L2C_StopMove::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t L2C_StopMove::_internal_uid() const {
  return uid_;
}
inline uint64_t L2C_StopMove::uid() const {
  // @@protoc_insertion_point(field_get:L2C_StopMove.uid)
  return _internal_uid();
}
inline void L2C_StopMove::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void L2C_StopMove::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:L2C_StopMove.uid)
}

// -------------------------------------------------------------------

// L2C_NotifyStopMove

// uint32 ret = 1;
inline void L2C_NotifyStopMove::clear_ret() {
  ret_ = 0u;
}
inline uint32_t L2C_NotifyStopMove::_internal_ret() const {
  return ret_;
}
inline uint32_t L2C_NotifyStopMove::ret() const {
  // @@protoc_insertion_point(field_get:L2C_NotifyStopMove.ret)
  return _internal_ret();
}
inline void L2C_NotifyStopMove::_internal_set_ret(uint32_t value) {
  
  ret_ = value;
}
inline void L2C_NotifyStopMove::set_ret(uint32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:L2C_NotifyStopMove.ret)
}

// uint64 uid = 2;
inline void L2C_NotifyStopMove::clear_uid() {
  uid_ = uint64_t{0u};
}
inline uint64_t L2C_NotifyStopMove::_internal_uid() const {
  return uid_;
}
inline uint64_t L2C_NotifyStopMove::uid() const {
  // @@protoc_insertion_point(field_get:L2C_NotifyStopMove.uid)
  return _internal_uid();
}
inline void L2C_NotifyStopMove::_internal_set_uid(uint64_t value) {
  
  uid_ = value;
}
inline void L2C_NotifyStopMove::set_uid(uint64_t value) {
  _internal_set_uid(value);
  // @@protoc_insertion_point(field_set:L2C_NotifyStopMove.uid)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MSG_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MSG_TYPE>() {
  return ::MSG_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cl_2eproto
